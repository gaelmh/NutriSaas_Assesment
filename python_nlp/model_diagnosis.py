# model_diagnosis.py - Diagnose and fix training issues

import json
import os
from collections import Counter

def analyze_training_data():
    """Analyze the training data to identify potential issues"""
    print("üîç Analyzing Training Data")
    print("=" * 50)
    
    with open('./data/training_data.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    intent_counts = Counter()
    total_examples = 0
    
    print("Intent Distribution:")
    for intent in data['intents']:
        count = len(intent['patterns'])
        intent_counts[intent['tag']] = count
        total_examples += count
        print(f"  {intent['tag']:15} ‚Üí {count:2} examples")
    
    print(f"\nTotal examples: {total_examples}")
    print(f"Average per intent: {total_examples / len(intent_counts):.1f}")
    
    # Check for issues
    issues = []
    if total_examples < 100:
        issues.append("‚ö†Ô∏è  Too few total examples (recommend 100+)")
    
    if min(intent_counts.values()) < 10:
        issues.append("‚ö†Ô∏è  Some intents have too few examples (recommend 10+ each)")
    
    if max(intent_counts.values()) / min(intent_counts.values()) > 3:
        issues.append("‚ö†Ô∏è  Unbalanced dataset (some intents have 3x more examples)")
    
    if issues:
        print("\nüö® Issues Found:")
        for issue in issues:
            print(f"  {issue}")
    else:
        print("\n‚úÖ Training data looks balanced")
    
    return intent_counts

def create_enhanced_training_data():
    """Create enhanced training data with more examples"""
    print("\nüöÄ Creating Enhanced Training Data")
    print("=" * 50)
    
    enhanced_data = {
        "intents": [
            {
                "tag": "greeting",
                "patterns": [
                    "Hola", "Hola, c√≥mo est√°s", "Buenos d√≠as", "Buenas tardes", "Qu√© tal",
                    "Hey", "hi", "hello", "Hola amigo", "Buenos d√≠as doctor", "Buenas noches",
                    "Saludos", "Hola qu√© tal", "Muy buenos d√≠as", "Hola buen d√≠a",
                    "Hola buenas", "Qu√© onda", "C√≥mo est√° usted", "Hola doctor",
                    "Buen d√≠a", "Buenas tardes doctor", "Hola amiga", "Hola querido",
                    "Hola mi amor", "Hola cari√±o", "Hola amor", "Hola que tal todo"
                ],
                "responses": ["¬°Hola! Bienvenido a NutriSaas ü•ó ¬øEn qu√© puedo ayudarte hoy?"]
            },
            {
                "tag": "about_nutrisaas",
                "patterns": [
                    "¬øQu√© es NutriSaas?", "H√°blame de NutriSaas", "Explica tu servicio",
                    "Qu√© servicios ofrecen", "Cu√©ntame sobre NutriSaas", "Qu√© hace NutriSaas",
                    "Para qu√© sirve NutriSaas", "Informaci√≥n sobre NutriSaas", "Describe NutriSaas",
                    "En qu√© consiste NutriSaas", "Qu√© tipo de servicio es", "Cu√°l es su funci√≥n",
                    "Expl√≠came qu√© hacen", "Cu√©ntame del servicio", "Qu√© ofrece la plataforma",
                    "De qu√© se trata esto", "Qu√© es esta aplicaci√≥n", "Para qu√© es esto",
                    "Explica la plataforma", "Cu√©ntame sobre el servicio", "Qu√© tipo de app es"
                ],
                "responses": ["NutriSaas es una plataforma que te ayuda a alcanzar tus metas de nutrici√≥n con planes personalizados."]
            },
            {
                "tag": "pricing",
                "patterns": [
                    "¬øCu√°nto cuestan sus planes?", "Precios", "Costo", "Quiero saber los planes",
                    "Dime los planes", "Cu√°nto pagar", "qu√© planes tienen", "planes de suscripci√≥n",
                    "Cu√°nto vale", "Precio de los servicios", "Costos de membres√≠a",
                    "Tarifas", "Cu√°nto cobra", "Precio mensual", "Precio anual",
                    "Informaci√≥n de precios", "Lista de precios", "Cu√°nto debo pagar",
                    "Costo del servicio", "Valor de la suscripci√≥n", "Precio de los planes",
                    "Cu√°nto cuesta el plan", "Precio del plan premium", "Plan b√°sico precio",
                    "Costo mensual", "Costo anual", "Precio plan familiar", "Ofertas disponibles"
                ],
                "responses": ["Esta es la informaci√≥n sobre nuestros planes..."]
            },
            {
                "tag": "nutrition",
                "patterns": [
                    "calor√≠as", "prote√≠na", "carbohidratos", "vitaminas", "nutrici√≥n",
                    "quiero saber sobre dietas", "informaci√≥n nutricional", "macronutrientes",
                    "micronutrientes", "fibra", "grasas", "az√∫cares", "sodio",
                    "calcio", "hierro", "zinc", "magnesio", "potasio",
                    "vitamina C", "vitamina D", "omega 3", "antioxidantes",
                    "calor√≠as diarias", "prote√≠na por d√≠a", "cu√°nta prote√≠na necesito",
                    "informaci√≥n sobre carbohidratos", "tipos de grasas", "grasas saludables"
                ],
                "responses": ["Puedo proporcionarte informaci√≥n sobre nutrici√≥n. ¬øSobre qu√© nutriente te gustar√≠a saber m√°s?"]
            },
            {
                "tag": "allergies",
                "patterns": [
                    "soy al√©rgico a", "tengo intolerancia a", "no puedo comer", "me hace da√±o",
                    "alergia", "intolerante", "reacci√≥n al√©rgica", "sensibilidad alimentaria",
                    "al√©rgico al gluten", "intolerancia lactosa", "alergia frutos secos",
                    "no tolero", "me causa alergia", "tengo alergia", "soy cel√≠aco",
                    "intolerante al gluten", "al√©rgico mariscos", "alergia huevos",
                    "no puedo consumir", "me prohibieron comer", "evito comer",
                    "restricciones alimentarias", "alimentos prohibidos", "dieta sin gluten"
                ],
                "responses": ["Por favor, especifica tus alergias y las tendr√© en cuenta para tus planes de comida."]
            },
            {
                "tag": "goals",
                "patterns": [
                    "quiero bajar de peso", "subir masa muscular", "objetivos", "c√≥mo puedo mantenerme",
                    "quiero definir mi cuerpo", "perder peso", "ganar m√∫sculo", "tonificar",
                    "adelgazar", "engordar", "aumentar masa", "definici√≥n muscular",
                    "quiero estar en forma", "mejorar mi f√≠sico", "transformar mi cuerpo",
                    "objetivo fitness", "meta de peso", "quiero marcar abdomen",
                    "desarrollar m√∫sculos", "reducir grasa", "quemar grasa",
                    "plan para adelgazar", "rutina para ganar masa", "dieta para definir"
                ],
                "responses": ["Entiendo tus objetivos. Para ayudarte, necesito saber m√°s sobre ti. ¬øCu√°l es tu sexo?"]
            },
            {
                "tag": "support",
                "patterns": [
                    "necesito ayuda", "tengo un problema", "hay un error", "no funciona algo",
                    "contacto", "hablar con un asesor", "soporte t√©cnico", "ayuda por favor",
                    "tengo dudas", "no entiendo", "no funciona", "est√° fallando",
                    "problema t√©cnico", "error en la app", "no puedo acceder",
                    "solicitar ayuda", "atenci√≥n al cliente", "servicio al cliente",
                    "quiero hablar con alguien", "necesito asistencia", "tengo una consulta",
                    "reportar problema", "solicitar soporte", "ayuda urgente"
                ],
                "responses": ["Veo que necesitas ayuda especializada. ¬øTe gustar√≠a hablar con uno de nuestros asesores?"]
            },
            {
                "tag": "admin_query",
                "patterns": [
                    "mu√©strame las alturas de los usuarios", "dame el reporte de altura",
                    "usuarios por altura", "estad√≠sticas de altura", "reporte usuarios",
                    "estad√≠sticas generales", "datos de usuarios", "informaci√≥n administrativa",
                    "dashboard admin", "panel administrativo", "m√©tricas usuarios",
                    "reporte completo", "estad√≠sticas del sistema", "datos del panel",
                    "informaci√≥n de base de datos", "consulta administrativa"
                ],
                "responses": ["üìä Alturas registradas:"]
            },
            {
                "tag": "register",
                "patterns": [
                    "Quiero registrarme", "Crear una cuenta", "Registrarme ahora",
                    "nueva cuenta", "abrir cuenta", "inscribirme", "registro",
                    "crear perfil", "unirme", "suscribirme", "empezar",
                    "quiero comenzar", "iniciar sesi√≥n nueva", "cuenta nueva",
                    "proceso de registro", "formulario registro", "sign up",
                    "crear usuario", "nueva membres√≠a", "activar cuenta"
                ],
                "responses": ["¬°Excelente! Puedes registrarte en la p√°gina de registro."]
            },
            {
                "tag": "fallback",
                "patterns": [
                    "No entiendo", "No s√© qu√© decir", "¬øQu√© significa eso?", "No entend√≠ la pregunta",
                    "habla m√°s claro", "no comprendo", "repite por favor", "no escuch√© bien",
                    "qu√© dijiste", "no te entiendo", "expl√≠cate mejor", "confuso",
                    "no s√©", "perd√≥n", "disculpa", "what", "huh", "eh",
                    "asdf", "test", "prueba", "123", "xyz", "random text"
                ],
                "responses": ["Una disculpa, mis habilidades no pueden solucionar esa pregunta por el momento."]
            }
        ]
    }
    
    # Save enhanced data
    with open('./data/enhanced_training_data.json', 'w', encoding='utf-8') as f:
        json.dump(enhanced_data, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ Enhanced training data saved to './data/enhanced_training_data.json'")
    
    # Count new examples
    total = 0
    for intent in enhanced_data['intents']:
        count = len(intent['patterns'])
        total += count
        print(f"  {intent['tag']:15} ‚Üí {count:2} examples")
    
    print(f"\nTotal examples: {total} (vs original)")
    return enhanced_data

def create_improved_config():
    """Create an improved training configuration"""
    config = """[paths]
train = "data/train.spacy"
dev = "data/dev.spacy"

[system]
gpu_allocator = null
seed = 0

[nlp]
lang = "es"
pipeline = ["textcat"]
batch_size = 1000

[components]

[components.textcat]
factory = "textcat"

[components.textcat.model]
@architectures = "spacy.TextCatEnsemble.v2"
exclusive_classes = true
hidden_size = 128
ngram_size = 2
dropout = 0.2

[corpora]

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}

[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}

[training]
seed = ${system.seed}
gpu_allocator = ${system.gpu_allocator}
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"
max_epochs = 20
patience = 5

[training.optimizer]
@optimizers = "Adam.v1"
learn_rate = 0.001

[training.score_weights]
cats_score = 1.0

[initialize]
vectors = null"""

    with open('./improved_config.cfg', 'w') as f:
        f.write(config)
    
    print("‚úÖ Improved config saved to './improved_config.cfg'")
    print("\nKey improvements:")
    print("  - Changed to TextCatEnsemble.v2 (better architecture)")
    print("  - Added hidden layer (128 neurons)")
    print("  - Increased ngram_size to 2")
    print("  - Added dropout (0.2) for regularization")
    print("  - Set max_epochs to 20 with patience")

def main():
    print("üî¨ NLP Model Diagnosis and Fix")
    print("=" * 50)
    
    # Analyze current data
    analyze_training_data()
    
    print("\n" + "="*50)
    print("üìù RECOMMENDATIONS:")
    print("="*50)
    print("1. Your model has very low confidence because:")
    print("   - Too few training examples per intent")
    print("   - Simple BOW architecture")
    print("   - Possible training issues")
    print("\n2. Immediate fixes:")
    print("   - Use confidence_threshold = 0.05 in main.py")
    print("   - This will make your current model work")
    print("\n3. Long-term fixes:")
    print("   - Add more training examples (done below)")
    print("   - Use better model architecture (done below)")
    print("   - Retrain with improved config")
    
    print("\n" + "="*50)
    choice = input("Create enhanced training data and config? (y/n): ").lower()
    
    if choice == 'y':
        create_enhanced_training_data()
        create_improved_config()
        
        print("\nüöÄ NEXT STEPS:")
        print("1. Update create_data.py to use enhanced_training_data.json")
        print("2. Run: python data/create_data.py")
        print("3. Train with: python -m spacy train improved_config.cfg --output ./output --paths.train ./data/train.spacy --paths.dev ./data/dev.spacy")
        print("4. Test again with the new model")
        print("\nüí° QUICK FIX for current model:")
        print("   Set confidence_threshold = 0.05 in main.py")

if __name__ == "__main__":
    main()